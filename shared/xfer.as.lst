                                                        ////////////////////////////////////////////////////////////////////////////
                                                        //                                                                        //
                                                        // xfer.as                                                                //
                                                        //                                                                        //
                                                        // Contect-switch assembly code support for thread.c                      //
                                                        //                                                                        //
                                                        ////////////////////////////////////////////////////////////////////////////
                                                        
                                                        // Imports:
                                                                .include "stdas.as"
                                                        // ------------------------------------------------------------
                                                        // Standard as definitions
                                                        
$0                                                      zero = $0    // fixed zero
$1                                                      r1 = $1      // function return value
$2                                                      r2 = $2      // not callee save
$3                                                      r3 = $3      // not callee save, function argument 1
$4                                                      r4 = $4      // not callee save, function argument 2
$5                                                      r5 = $5      // not callee save, function argument 3
$6                                                      r6 = $6      // not callee save, function argument 4
$7                                                      r7 = $7      // not callee save, function argument 5
$8                                                      r8 = $8      // not callee save, function argument 6
$9                                                      r9 = $9      // callee save
$10                                                     r10 = $10    // callee save
$11                                                     r11 = $11    // callee save
$12                                                     r12 = $12    // callee save
$13                                                     r13 = $13    // callee save
$14                                                     r14 = $14    // callee save
$15                                                     r15 = $15    // callee save
$16                                                     r16 = $16    // callee save
$17                                                     r17 = $17    // callee save
$18                                                     r18 = $18    // callee save
$19                                                     r19 = $19    // callee save
$20                                                     r20 = $20    // callee save
$21                                                     r21 = $21    // callee save
$22                                                     r22 = $22    // callee save
$23                                                     fp = $23     // callee save, frame pointer
$24                                                     t1 = $24     // not callee save, temporary 1, not avail for reg alloc
$25                                                     t2 = $25     // not callee save, temporary 2, not avail for reg alloc
$26                                                     t3 = $26     // not callee save, temporary 3, not avail for reg alloc
$27                                                     p1 = $27     // not callee save, platform 1, not avail for reg alloc
$28                                                     sp = $28     // callee save, stack pointer
$29                                                     vb = $29     // not callee save, rw & rb only, not avail for reg alloc
                                                        
  00000000                                                  .assume   zero,0
                                                        
                                                        // ------------------------------------------------------------
                                                                .globl  _k_threadBase
                                                                .globl  _abort
                                                        
                                                        // Exports:
                                                                .file "xfer.as"
                                                                .globl  _k_resume
                                                                .globl  _k_startThread
                                                                .globl  _k_xfer
                                                        
                                                        
                                                        ////////////////////////////////////////////////////////////////////////////
                                                        //                                                                        //
                                                        // saveSP (private): save processor state at SP, and store SP at *r2      //
                                                        //                                                                        //
                                                        // Entry:                                                                 //
                                                        //    SP = address immediately above save area                            //
                                                        //    r3 = address to save final SP                                       //
                                                        //    r4 = to be left unchanged                                           //
                                                        //    link = return address for this subroutine                           //
                                                        // Return:                                                                //
                                                        //    SP = bottom address of save area                                    //
                                                        //    r4 = unchanged                                                      //
                                                        //                                                                        //
                                                        ////////////////////////////////////////////////////////////////////////////
C 00000000                                              saveSP:
C 00000000 f6000305  $24 = LINK OR 00000000                     ld      t1,link
C 00000001 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000002 4fc00305  WQ = $31 = $9 OR 00000000                  ld      wq,r9
C 00000003 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000004 57c00305  WQ = $31 = $10 OR 00000000                 ld      wq,r10
C 00000005 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000006 5fc00305  WQ = $31 = $11 OR 00000000                 ld      wq,r11
C 00000007 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000008 67c00305  WQ = $31 = $12 OR 00000000                 ld      wq,r12
C 00000009 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000000a 6fc00305  WQ = $31 = $13 OR 00000000                 ld      wq,r13
C 0000000b e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000000c 77c00305  WQ = $31 = $14 OR 00000000                 ld      wq,r14
C 0000000d e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000000e 7fc00305  WQ = $31 = $15 OR 00000000                 ld      wq,r15
C 0000000f e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000010 87c00305  WQ = $31 = $16 OR 00000000                 ld      wq,r16
C 00000011 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000012 8fc00305  WQ = $31 = $17 OR 00000000                 ld      wq,r17
C 00000013 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000014 97c00305  WQ = $31 = $18 OR 00000000                 ld      wq,r18
C 00000015 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000016 9fc00305  WQ = $31 = $19 OR 00000000                 ld      wq,r19
C 00000017 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000018 a7c00305  WQ = $31 = $20 OR 00000000                 ld      wq,r20
C 00000019 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000001a afc00305  WQ = $31 = $21 OR 00000000                 ld      wq,r21
C 0000001b e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000001c b7c00305  WQ = $31 = $22 OR 00000000                 ld      wq,r22
C 0000001d e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000001e bfc00305  WQ = $31 = $23 OR 00000000                 ld      wq,fp
C 0000001f 18c00246  AQW = $3 = $3 SUB 00000000                 aqw_sub r3,r3,0
C 00000020 e7c00305  WQ = $31 = $28 OR 00000000                 ld      wq,sp
C 00000021 c000030c  J $24 OR 00000000                          j       t1
                                                        
                                                        
                                                        ////////////////////////////////////////////////////////////////////////////
                                                        //                                                                        //
                                                        // void k_resume(void * dest);                                            //
                                                        //                                                                        //
                                                        // Resume using processor state stored at "dest" (in r3)                  //
                                                        //                                                                        //
                                                        // Set SP from "dest",                                                    //
                                                        // then load processor state from *SP,                                    //
                                                        // then return via normal function linkage at *SP.                        //
                                                        //                                                                        //
                                                        // Calling thread is either dead, or has preserved its state via          //
                                                        // saveSP for future use by another call of k_resume.                     //
                                                        // This code itself doesn't return to its own caller.                     //
                                                        //                                                                        //
                                                        // Argument is in r3                                                      //
                                                        //                                                                        //
                                                        ////////////////////////////////////////////////////////////////////////////
                                                                .type   _k_resume, @function
C 00000022                                              _k_resume:
C 00000022 1f000305  $28 = $3 OR 00000000                       ld      sp,r3
C 00000023 e7000207  AQR = $28 = $28 ADD 00000000               aqr_add sp,sp,0
C 00000024 edc00305  $23 = RQ OR 00000000                       ld fp,rq
C 00000025 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000026 ed800305  $22 = RQ OR 00000000                       ld r22,rq
C 00000027 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000028 ed400305  $21 = RQ OR 00000000                       ld r21,rq
C 00000029 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000002a ed000305  $20 = RQ OR 00000000                       ld r20,rq
C 0000002b e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000002c ecc00305  $19 = RQ OR 00000000                       ld r19,rq
C 0000002d e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000002e ec800305  $18 = RQ OR 00000000                       ld r18,rq
C 0000002f e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000030 ec400305  $17 = RQ OR 00000000                       ld r17,rq
C 00000031 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000032 ec000305  $16 = RQ OR 00000000                       ld r16,rq
C 00000033 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000034 ebc00305  $15 = RQ OR 00000000                       ld r15,rq
C 00000035 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000036 eb800305  $14 = RQ OR 00000000                       ld r14,rq
C 00000037 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000038 eb400305  $13 = RQ OR 00000000                       ld r13,rq
C 00000039 e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000003a eb000305  $12 = RQ OR 00000000                       ld r12,rq
C 0000003b e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000003c eac00305  $11 = RQ OR 00000000                       ld r11,rq
C 0000003d e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 0000003e ea800305  $10 = RQ OR 00000000                       ld r10,rq
C 0000003f e7001207  AQR = $28 = $28 ADD 00000004               aqr_add sp,sp,4
C 00000040 ea400305  $9 = RQ OR 00000000                        ld r9,rq
C 00000041 e7001205  $28 = $28 ADD 00000004                     add     sp,sp,4
C 00000042 e7000207  AQR = $28 = $28 ADD 00000000               aqr_add sp,sp,0
C 00000043 e7001205  $28 = $28 ADD 00000004                     add     sp,sp,4
C 00000044 e800030c  J RQ OR 00000000                           j       rq
                                                                .size   _k_resume,.-_k_resume
                                                        
                                                        
                                                        ////////////////////////////////////////////////////////////////////////////
                                                        //                                                                        //
                                                        // void k_startThread(void ** srce, void * dest);                         //
                                                        //                                                                        //
                                                        // Specialized context switch at start of a thread.                       //
                                                        //                                                                        //
                                                        // Saves state on stack and saves SP to *srce,                            //
                                                        // then loads new SP "dest",                                              //
                                                        // then calls k_threadBase(), which never returns.                        //
                                                        //                                                                        //
                                                        // Arguments are in r3-r4                                                 //
                                                        //                                                                        //
                                                        ////////////////////////////////////////////////////////////////////////////
                                                                .type   _k_startThread, @function
C 00000045                                              _k_startThread:
C 00000045 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 00000046 f7c00305  WQ = $31 = LINK OR 00000000                ld      wq,link
C 00000047 f8011e48  CALL PC SUB 00000047                       call saveSP
C 00000048 27000305  $28 = $4 OR 00000000                       ld      sp,r4
C 00000049 00000003* LINK = 00000000                            long_call _k_threadBase
C 0000004a f0000308* CALL LINK OR 00000000              
C 0000004b 00000003* LINK = 00000000                            long_call _abort
C 0000004c f0000308* CALL LINK OR 00000000              
                                                                .size   _k_startThread,.-_k_startThread
                                                        
                                                        
                                                        ////////////////////////////////////////////////////////////////////////////
                                                        //                                                                        //
                                                        // void k_xfer(void ** srce, void * dest);                                //
                                                        //                                                                        //
                                                        // General-purpose context switch.                                        //
                                                        //                                                                        //
                                                        // Saves state on stack and saves SP to *srce,                            //
                                                        // then loads new SP "dest",                                              //
                                                        // then restores state from new *SP and returns on new stack.             //
                                                        //                                                                        //
                                                        // Arguments are in r3-r4                                                 //
                                                        //                                                                        //
                                                        ////////////////////////////////////////////////////////////////////////////
                                                                .type   _k_xfer, @function
C 0000004d                                              _k_xfer:
C 0000004d e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub sp,sp,4
C 0000004e f7c00305  WQ = $31 = LINK OR 00000000                ld      wq,link
C 0000004f f8013e48  CALL PC SUB 0000004f                       call saveSP
C 00000050 20c00305  $3 = $4 OR 00000000                        ld      r3,r4
C 00000051 00000023* LINK = 00000020                            long_j  _k_resume
C 00000052 f0000b0c* J LINK OR 00000002                 
                                                                .size   _k_xfer,.-_k_xfer
                                                        

assume   $0 = 00000000

                        .text + 00000053     .
                             <undefined>  E  _abort
                        .text + 00000022  G  _k_resume
                        .text + 00000045  G  _k_startThread
                             <undefined>  E  _k_threadBase
                        .text + 0000004d  G  _k_xfer
                                00000000     code.rota
                                00000001     code.step
                                00000002     data.rota
                                00000004     data.step
                                     $23     fp
                                    link     link
                                     $27     p1
                                      pc     pc
                                      $1     r1
                                     $10     r10
                                     $11     r11
                                     $12     r12
                                     $13     r13
                                     $14     r14
                                     $15     r15
                                     $16     r16
                                     $17     r17
                                     $18     r18
                                     $19     r19
                                      $2     r2
                                     $20     r20
                                     $21     r21
                                     $22     r22
                                      $3     r3
                                      $4     r4
                                      $5     r5
                                      $6     r6
                                      $7     r7
                                      $8     r8
                                      $9     r9
                                      rq     rq
                        .text + 00000000     saveSP
                                     $28     sp
                                     $24     t1
                                     $25     t2
                                     $26     t3
                                     $29     vb
                                      wq     wq
                                      $0     zero
